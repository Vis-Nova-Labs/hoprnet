/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface ChannelsMockInterface extends ethers.utils.Interface {
  functions: {
    'FUND_CHANNEL_MULTI_SIZE()': FunctionFragment
    'TOKENS_RECIPIENT_INTERFACE_HASH()': FunctionFragment
    'announce(bytes)': FunctionFragment
    'bumpChannel(address,bytes32)': FunctionFragment
    'canImplementInterfaceForAddress(bytes32,address)': FunctionFragment
    'channels(bytes32)': FunctionFragment
    'computeChallengeInternal(bytes32)': FunctionFragment
    'finalizeChannelClosure(address)': FunctionFragment
    'fundChannelMulti(address,address,uint256,uint256)': FunctionFragment
    'getChannelIdInternal(address,address)': FunctionFragment
    'getEncodedTicketInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)': FunctionFragment
    'getTicketHashInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)': FunctionFragment
    'getTicketLuckInternal(bytes32,bytes32,bytes32)': FunctionFragment
    'initiateChannelClosure(address)': FunctionFragment
    'multicall(bytes[])': FunctionFragment
    'redeemTicket(address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)': FunctionFragment
    'secsClosure()': FunctionFragment
    'token()': FunctionFragment
    'tokensReceived(address,address,address,uint256,bytes,bytes)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'FUND_CHANNEL_MULTI_SIZE', values?: undefined): string
  encodeFunctionData(functionFragment: 'TOKENS_RECIPIENT_INTERFACE_HASH', values?: undefined): string
  encodeFunctionData(functionFragment: 'announce', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'bumpChannel', values: [string, BytesLike]): string
  encodeFunctionData(functionFragment: 'canImplementInterfaceForAddress', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'channels', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'computeChallengeInternal', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'finalizeChannelClosure', values: [string]): string
  encodeFunctionData(functionFragment: 'fundChannelMulti', values: [string, string, BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getChannelIdInternal', values: [string, string]): string
  encodeFunctionData(
    functionFragment: 'getEncodedTicketInternal',
    values: [string, BigNumberish, BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getTicketHashInternal',
    values: [string, BigNumberish, BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'getTicketLuckInternal', values: [BytesLike, BytesLike, BytesLike]): string
  encodeFunctionData(functionFragment: 'initiateChannelClosure', values: [string]): string
  encodeFunctionData(functionFragment: 'multicall', values: [BytesLike[]]): string
  encodeFunctionData(
    functionFragment: 'redeemTicket',
    values: [string, BytesLike, BigNumberish, BigNumberish, BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'secsClosure', values?: undefined): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'tokensReceived',
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string

  decodeFunctionResult(functionFragment: 'FUND_CHANNEL_MULTI_SIZE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'TOKENS_RECIPIENT_INTERFACE_HASH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'announce', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bumpChannel', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'canImplementInterfaceForAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'channels', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'computeChallengeInternal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'finalizeChannelClosure', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'fundChannelMulti', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getChannelIdInternal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getEncodedTicketInternal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getTicketHashInternal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getTicketLuckInternal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initiateChannelClosure', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'redeemTicket', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'secsClosure', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokensReceived', data: BytesLike): Result

  events: {
    'Announcement(address,bytes)': EventFragment
    'ChannelBumped(address,address,bytes32,uint256,uint256)': EventFragment
    'ChannelClosureFinalized(address,address,uint32,uint256)': EventFragment
    'ChannelClosureInitiated(address,address,uint32)': EventFragment
    'ChannelUpdate(address,address,tuple)': EventFragment
    'TicketRedeemed(address,address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)': EventFragment
    'TokensReceived(address,address,address,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Announcement'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChannelBumped'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChannelClosureFinalized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChannelClosureInitiated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChannelUpdate'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TicketRedeemed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TokensReceived'): EventFragment
}

export class ChannelsMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ChannelsMockInterface

  functions: {
    FUND_CHANNEL_MULTI_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>

    'FUND_CHANNEL_MULTI_SIZE()'(overrides?: CallOverrides): Promise<[BigNumber]>

    TOKENS_RECIPIENT_INTERFACE_HASH(overrides?: CallOverrides): Promise<[string]>

    'TOKENS_RECIPIENT_INTERFACE_HASH()'(overrides?: CallOverrides): Promise<[string]>

    announce(
      multiaddr: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'announce(bytes)'(
      multiaddr: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    bumpChannel(
      source: string,
      newCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'bumpChannel(address,bytes32)'(
      source: string,
      newCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    'canImplementInterfaceForAddress(bytes32,address)'(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    channels(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, number, BigNumber, number] & {
        balance: BigNumber
        commitment: string
        ticketEpoch: BigNumber
        ticketIndex: BigNumber
        status: number
        channelEpoch: BigNumber
        closureTime: number
      }
    >

    'channels(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, number, BigNumber, number] & {
        balance: BigNumber
        commitment: string
        ticketEpoch: BigNumber
        ticketIndex: BigNumber
        status: number
        channelEpoch: BigNumber
        closureTime: number
      }
    >

    computeChallengeInternal(response: BytesLike, overrides?: CallOverrides): Promise<[string]>

    'computeChallengeInternal(bytes32)'(response: BytesLike, overrides?: CallOverrides): Promise<[string]>

    finalizeChannelClosure(
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'finalizeChannelClosure(address)'(
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    fundChannelMulti(
      account1: string,
      account2: string,
      amount1: BigNumberish,
      amount2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'fundChannelMulti(address,address,uint256,uint256)'(
      account1: string,
      account2: string,
      amount1: BigNumberish,
      amount2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getChannelIdInternal(partyA: string, partyB: string, overrides?: CallOverrides): Promise<[string]>

    'getChannelIdInternal(address,address)'(
      partyA: string,
      partyB: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    getEncodedTicketInternal(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'getEncodedTicketInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)'(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    getTicketHashInternal(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'getTicketHashInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)'(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    getTicketLuckInternal(
      ticketHash: BytesLike,
      secretPreImage: BytesLike,
      proofOfRelaySecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getTicketLuckInternal(bytes32,bytes32,bytes32)'(
      ticketHash: BytesLike,
      secretPreImage: BytesLike,
      proofOfRelaySecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    initiateChannelClosure(
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'initiateChannelClosure(address)'(
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'multicall(bytes[])'(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    redeemTicket(
      source: string,
      nextCommitment: BytesLike,
      ticketEpoch: BigNumberish,
      ticketIndex: BigNumberish,
      proofOfRelaySecret: BytesLike,
      amount: BigNumberish,
      winProb: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'redeemTicket(address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)'(
      source: string,
      nextCommitment: BytesLike,
      ticketEpoch: BigNumberish,
      ticketIndex: BigNumberish,
      proofOfRelaySecret: BytesLike,
      amount: BigNumberish,
      winProb: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    secsClosure(overrides?: CallOverrides): Promise<[number]>

    'secsClosure()'(overrides?: CallOverrides): Promise<[number]>

    token(overrides?: CallOverrides): Promise<[string]>

    'token()'(overrides?: CallOverrides): Promise<[string]>

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'tokensReceived(address,address,address,uint256,bytes,bytes)'(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  FUND_CHANNEL_MULTI_SIZE(overrides?: CallOverrides): Promise<BigNumber>

  'FUND_CHANNEL_MULTI_SIZE()'(overrides?: CallOverrides): Promise<BigNumber>

  TOKENS_RECIPIENT_INTERFACE_HASH(overrides?: CallOverrides): Promise<string>

  'TOKENS_RECIPIENT_INTERFACE_HASH()'(overrides?: CallOverrides): Promise<string>

  announce(
    multiaddr: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'announce(bytes)'(
    multiaddr: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  bumpChannel(
    source: string,
    newCommitment: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'bumpChannel(address,bytes32)'(
    source: string,
    newCommitment: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  canImplementInterfaceForAddress(interfaceHash: BytesLike, account: string, overrides?: CallOverrides): Promise<string>

  'canImplementInterfaceForAddress(bytes32,address)'(
    interfaceHash: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<string>

  channels(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, number, BigNumber, number] & {
      balance: BigNumber
      commitment: string
      ticketEpoch: BigNumber
      ticketIndex: BigNumber
      status: number
      channelEpoch: BigNumber
      closureTime: number
    }
  >

  'channels(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, number, BigNumber, number] & {
      balance: BigNumber
      commitment: string
      ticketEpoch: BigNumber
      ticketIndex: BigNumber
      status: number
      channelEpoch: BigNumber
      closureTime: number
    }
  >

  computeChallengeInternal(response: BytesLike, overrides?: CallOverrides): Promise<string>

  'computeChallengeInternal(bytes32)'(response: BytesLike, overrides?: CallOverrides): Promise<string>

  finalizeChannelClosure(
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'finalizeChannelClosure(address)'(
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  fundChannelMulti(
    account1: string,
    account2: string,
    amount1: BigNumberish,
    amount2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'fundChannelMulti(address,address,uint256,uint256)'(
    account1: string,
    account2: string,
    amount1: BigNumberish,
    amount2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getChannelIdInternal(partyA: string, partyB: string, overrides?: CallOverrides): Promise<string>

  'getChannelIdInternal(address,address)'(partyA: string, partyB: string, overrides?: CallOverrides): Promise<string>

  getEncodedTicketInternal(
    recipient: string,
    recipientCounter: BigNumberish,
    proofOfRelaySecret: BytesLike,
    channelIteration: BigNumberish,
    amount: BigNumberish,
    ticketIndex: BigNumberish,
    winProb: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  'getEncodedTicketInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)'(
    recipient: string,
    recipientCounter: BigNumberish,
    proofOfRelaySecret: BytesLike,
    channelIteration: BigNumberish,
    amount: BigNumberish,
    ticketIndex: BigNumberish,
    winProb: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  getTicketHashInternal(
    recipient: string,
    recipientCounter: BigNumberish,
    proofOfRelaySecret: BytesLike,
    channelIteration: BigNumberish,
    amount: BigNumberish,
    ticketIndex: BigNumberish,
    winProb: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  'getTicketHashInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)'(
    recipient: string,
    recipientCounter: BigNumberish,
    proofOfRelaySecret: BytesLike,
    channelIteration: BigNumberish,
    amount: BigNumberish,
    ticketIndex: BigNumberish,
    winProb: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  getTicketLuckInternal(
    ticketHash: BytesLike,
    secretPreImage: BytesLike,
    proofOfRelaySecret: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getTicketLuckInternal(bytes32,bytes32,bytes32)'(
    ticketHash: BytesLike,
    secretPreImage: BytesLike,
    proofOfRelaySecret: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  initiateChannelClosure(
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'initiateChannelClosure(address)'(
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'multicall(bytes[])'(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  redeemTicket(
    source: string,
    nextCommitment: BytesLike,
    ticketEpoch: BigNumberish,
    ticketIndex: BigNumberish,
    proofOfRelaySecret: BytesLike,
    amount: BigNumberish,
    winProb: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'redeemTicket(address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)'(
    source: string,
    nextCommitment: BytesLike,
    ticketEpoch: BigNumberish,
    ticketIndex: BigNumberish,
    proofOfRelaySecret: BytesLike,
    amount: BigNumberish,
    winProb: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  secsClosure(overrides?: CallOverrides): Promise<number>

  'secsClosure()'(overrides?: CallOverrides): Promise<number>

  token(overrides?: CallOverrides): Promise<string>

  'token()'(overrides?: CallOverrides): Promise<string>

  tokensReceived(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'tokensReceived(address,address,address,uint256,bytes,bytes)'(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    FUND_CHANNEL_MULTI_SIZE(overrides?: CallOverrides): Promise<BigNumber>

    'FUND_CHANNEL_MULTI_SIZE()'(overrides?: CallOverrides): Promise<BigNumber>

    TOKENS_RECIPIENT_INTERFACE_HASH(overrides?: CallOverrides): Promise<string>

    'TOKENS_RECIPIENT_INTERFACE_HASH()'(overrides?: CallOverrides): Promise<string>

    announce(multiaddr: BytesLike, overrides?: CallOverrides): Promise<void>

    'announce(bytes)'(multiaddr: BytesLike, overrides?: CallOverrides): Promise<void>

    bumpChannel(source: string, newCommitment: BytesLike, overrides?: CallOverrides): Promise<void>

    'bumpChannel(address,bytes32)'(source: string, newCommitment: BytesLike, overrides?: CallOverrides): Promise<void>

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<string>

    'canImplementInterfaceForAddress(bytes32,address)'(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<string>

    channels(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, number, BigNumber, number] & {
        balance: BigNumber
        commitment: string
        ticketEpoch: BigNumber
        ticketIndex: BigNumber
        status: number
        channelEpoch: BigNumber
        closureTime: number
      }
    >

    'channels(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, number, BigNumber, number] & {
        balance: BigNumber
        commitment: string
        ticketEpoch: BigNumber
        ticketIndex: BigNumber
        status: number
        channelEpoch: BigNumber
        closureTime: number
      }
    >

    computeChallengeInternal(response: BytesLike, overrides?: CallOverrides): Promise<string>

    'computeChallengeInternal(bytes32)'(response: BytesLike, overrides?: CallOverrides): Promise<string>

    finalizeChannelClosure(destination: string, overrides?: CallOverrides): Promise<void>

    'finalizeChannelClosure(address)'(destination: string, overrides?: CallOverrides): Promise<void>

    fundChannelMulti(
      account1: string,
      account2: string,
      amount1: BigNumberish,
      amount2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'fundChannelMulti(address,address,uint256,uint256)'(
      account1: string,
      account2: string,
      amount1: BigNumberish,
      amount2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    getChannelIdInternal(partyA: string, partyB: string, overrides?: CallOverrides): Promise<string>

    'getChannelIdInternal(address,address)'(partyA: string, partyB: string, overrides?: CallOverrides): Promise<string>

    getEncodedTicketInternal(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    'getEncodedTicketInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)'(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    getTicketHashInternal(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    'getTicketHashInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)'(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    getTicketLuckInternal(
      ticketHash: BytesLike,
      secretPreImage: BytesLike,
      proofOfRelaySecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getTicketLuckInternal(bytes32,bytes32,bytes32)'(
      ticketHash: BytesLike,
      secretPreImage: BytesLike,
      proofOfRelaySecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initiateChannelClosure(destination: string, overrides?: CallOverrides): Promise<void>

    'initiateChannelClosure(address)'(destination: string, overrides?: CallOverrides): Promise<void>

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>

    'multicall(bytes[])'(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>

    redeemTicket(
      source: string,
      nextCommitment: BytesLike,
      ticketEpoch: BigNumberish,
      ticketIndex: BigNumberish,
      proofOfRelaySecret: BytesLike,
      amount: BigNumberish,
      winProb: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'redeemTicket(address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)'(
      source: string,
      nextCommitment: BytesLike,
      ticketEpoch: BigNumberish,
      ticketIndex: BigNumberish,
      proofOfRelaySecret: BytesLike,
      amount: BigNumberish,
      winProb: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    secsClosure(overrides?: CallOverrides): Promise<number>

    'secsClosure()'(overrides?: CallOverrides): Promise<number>

    token(overrides?: CallOverrides): Promise<string>

    'token()'(overrides?: CallOverrides): Promise<string>

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'tokensReceived(address,address,address,uint256,bytes,bytes)'(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    Announcement(
      account: string | null,
      multiaddr: null
    ): TypedEventFilter<[string, string], { account: string; multiaddr: string }>

    ChannelBumped(
      source: string | null,
      destination: string | null,
      newCommitment: null,
      ticketEpoch: null,
      channelBalance: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        source: string
        destination: string
        newCommitment: string
        ticketEpoch: BigNumber
        channelBalance: BigNumber
      }
    >

    ChannelClosureFinalized(
      source: string | null,
      destination: string | null,
      closureFinalizationTime: null,
      channelBalance: null
    ): TypedEventFilter<
      [string, string, number, BigNumber],
      {
        source: string
        destination: string
        closureFinalizationTime: number
        channelBalance: BigNumber
      }
    >

    ChannelClosureInitiated(
      source: string | null,
      destination: string | null,
      closureInitiationTime: null
    ): TypedEventFilter<
      [string, string, number],
      { source: string; destination: string; closureInitiationTime: number }
    >

    ChannelUpdate(
      source: string | null,
      destination: string | null,
      newState: null
    ): TypedEventFilter<
      [
        string,
        string,
        [BigNumber, string, BigNumber, BigNumber, number, BigNumber, number] & {
          balance: BigNumber
          commitment: string
          ticketEpoch: BigNumber
          ticketIndex: BigNumber
          status: number
          channelEpoch: BigNumber
          closureTime: number
        }
      ],
      {
        source: string
        destination: string
        newState: [BigNumber, string, BigNumber, BigNumber, number, BigNumber, number] & {
          balance: BigNumber
          commitment: string
          ticketEpoch: BigNumber
          ticketIndex: BigNumber
          status: number
          channelEpoch: BigNumber
          closureTime: number
        }
      }
    >

    TicketRedeemed(
      source: string | null,
      destination: string | null,
      nextCommitment: null,
      ticketEpoch: null,
      ticketIndex: null,
      proofOfRelaySecret: null,
      amount: null,
      winProb: null,
      signature: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string, BigNumber, BigNumber, string],
      {
        source: string
        destination: string
        nextCommitment: string
        ticketEpoch: BigNumber
        ticketIndex: BigNumber
        proofOfRelaySecret: string
        amount: BigNumber
        winProb: BigNumber
        signature: string
      }
    >

    TokensReceived(
      from: string | null,
      account1: string | null,
      account2: string | null,
      amount1: null,
      amount2: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        from: string
        account1: string
        account2: string
        amount1: BigNumber
        amount2: BigNumber
      }
    >
  }

  estimateGas: {
    FUND_CHANNEL_MULTI_SIZE(overrides?: CallOverrides): Promise<BigNumber>

    'FUND_CHANNEL_MULTI_SIZE()'(overrides?: CallOverrides): Promise<BigNumber>

    TOKENS_RECIPIENT_INTERFACE_HASH(overrides?: CallOverrides): Promise<BigNumber>

    'TOKENS_RECIPIENT_INTERFACE_HASH()'(overrides?: CallOverrides): Promise<BigNumber>

    announce(multiaddr: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    'announce(bytes)'(
      multiaddr: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    bumpChannel(
      source: string,
      newCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'bumpChannel(address,bytes32)'(
      source: string,
      newCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'canImplementInterfaceForAddress(bytes32,address)'(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    channels(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'channels(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    computeChallengeInternal(response: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'computeChallengeInternal(bytes32)'(response: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    finalizeChannelClosure(
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'finalizeChannelClosure(address)'(
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    fundChannelMulti(
      account1: string,
      account2: string,
      amount1: BigNumberish,
      amount2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'fundChannelMulti(address,address,uint256,uint256)'(
      account1: string,
      account2: string,
      amount1: BigNumberish,
      amount2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getChannelIdInternal(partyA: string, partyB: string, overrides?: CallOverrides): Promise<BigNumber>

    'getChannelIdInternal(address,address)'(
      partyA: string,
      partyB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getEncodedTicketInternal(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getEncodedTicketInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)'(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTicketHashInternal(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getTicketHashInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)'(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTicketLuckInternal(
      ticketHash: BytesLike,
      secretPreImage: BytesLike,
      proofOfRelaySecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getTicketLuckInternal(bytes32,bytes32,bytes32)'(
      ticketHash: BytesLike,
      secretPreImage: BytesLike,
      proofOfRelaySecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initiateChannelClosure(
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'initiateChannelClosure(address)'(
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    multicall(data: BytesLike[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    'multicall(bytes[])'(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    redeemTicket(
      source: string,
      nextCommitment: BytesLike,
      ticketEpoch: BigNumberish,
      ticketIndex: BigNumberish,
      proofOfRelaySecret: BytesLike,
      amount: BigNumberish,
      winProb: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'redeemTicket(address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)'(
      source: string,
      nextCommitment: BytesLike,
      ticketEpoch: BigNumberish,
      ticketIndex: BigNumberish,
      proofOfRelaySecret: BytesLike,
      amount: BigNumberish,
      winProb: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    secsClosure(overrides?: CallOverrides): Promise<BigNumber>

    'secsClosure()'(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    'token()'(overrides?: CallOverrides): Promise<BigNumber>

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'tokensReceived(address,address,address,uint256,bytes,bytes)'(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    FUND_CHANNEL_MULTI_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'FUND_CHANNEL_MULTI_SIZE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    TOKENS_RECIPIENT_INTERFACE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'TOKENS_RECIPIENT_INTERFACE_HASH()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    announce(
      multiaddr: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'announce(bytes)'(
      multiaddr: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    bumpChannel(
      source: string,
      newCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'bumpChannel(address,bytes32)'(
      source: string,
      newCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'canImplementInterfaceForAddress(bytes32,address)'(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    channels(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'channels(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    computeChallengeInternal(response: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'computeChallengeInternal(bytes32)'(response: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    finalizeChannelClosure(
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'finalizeChannelClosure(address)'(
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    fundChannelMulti(
      account1: string,
      account2: string,
      amount1: BigNumberish,
      amount2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'fundChannelMulti(address,address,uint256,uint256)'(
      account1: string,
      account2: string,
      amount1: BigNumberish,
      amount2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getChannelIdInternal(partyA: string, partyB: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getChannelIdInternal(address,address)'(
      partyA: string,
      partyB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getEncodedTicketInternal(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getEncodedTicketInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)'(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTicketHashInternal(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getTicketHashInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)'(
      recipient: string,
      recipientCounter: BigNumberish,
      proofOfRelaySecret: BytesLike,
      channelIteration: BigNumberish,
      amount: BigNumberish,
      ticketIndex: BigNumberish,
      winProb: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTicketLuckInternal(
      ticketHash: BytesLike,
      secretPreImage: BytesLike,
      proofOfRelaySecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getTicketLuckInternal(bytes32,bytes32,bytes32)'(
      ticketHash: BytesLike,
      secretPreImage: BytesLike,
      proofOfRelaySecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initiateChannelClosure(
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'initiateChannelClosure(address)'(
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'multicall(bytes[])'(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    redeemTicket(
      source: string,
      nextCommitment: BytesLike,
      ticketEpoch: BigNumberish,
      ticketIndex: BigNumberish,
      proofOfRelaySecret: BytesLike,
      amount: BigNumberish,
      winProb: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'redeemTicket(address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)'(
      source: string,
      nextCommitment: BytesLike,
      ticketEpoch: BigNumberish,
      ticketIndex: BigNumberish,
      proofOfRelaySecret: BytesLike,
      amount: BigNumberish,
      winProb: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    secsClosure(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'secsClosure()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'token()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'tokensReceived(address,address,address,uint256,bytes,bytes)'(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
