/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface HoprTokenInterface extends ethers.utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'MINTER_ROLE()': FunctionFragment
    'accountSnapshots(address,uint256)': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'authorizeOperator(address)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'balanceOfAt(address,uint128)': FunctionFragment
    'burn(uint256,bytes)': FunctionFragment
    'decimals()': FunctionFragment
    'defaultOperators()': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'getRoleMember(bytes32,uint256)': FunctionFragment
    'getRoleMemberCount(bytes32)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'granularity()': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'isOperatorFor(address,address)': FunctionFragment
    'mint(address,uint256,bytes,bytes)': FunctionFragment
    'name()': FunctionFragment
    'operatorBurn(address,uint256,bytes,bytes)': FunctionFragment
    'operatorSend(address,address,uint256,bytes,bytes)': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeOperator(address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'send(address,uint256,bytes)': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'totalSupplyAt(uint128)': FunctionFragment
    'totalSupplySnapshots(uint256)': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'MINTER_ROLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'accountSnapshots', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'authorizeOperator', values: [string]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'balanceOfAt', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'burn', values: [BigNumberish, BytesLike]): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(functionFragment: 'defaultOperators', values?: undefined): string
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'getRoleMember', values: [BytesLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'granularity', values?: undefined): string
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'isOperatorFor', values: [string, string]): string
  encodeFunctionData(functionFragment: 'mint', values: [string, BigNumberish, BytesLike, BytesLike]): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'operatorBurn', values: [string, BigNumberish, BytesLike, BytesLike]): string
  encodeFunctionData(
    functionFragment: 'operatorSend',
    values: [string, string, BigNumberish, BytesLike, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'revokeOperator', values: [string]): string
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'send', values: [string, BigNumberish, BytesLike]): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalSupplyAt', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'totalSupplySnapshots', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MINTER_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'accountSnapshots', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'authorizeOperator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOfAt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'defaultOperators', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'granularity', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isOperatorFor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'operatorBurn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'operatorSend', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'revokeOperator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupplyAt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupplySnapshots', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'AuthorizedOperator(address,address)': EventFragment
    'Burned(address,address,uint256,bytes,bytes)': EventFragment
    'Minted(address,address,uint256,bytes,bytes)': EventFragment
    'RevokedOperator(address,address)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
    'Sent(address,address,address,uint256,bytes,bytes)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AuthorizedOperator'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Burned'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Minted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RevokedOperator'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Sent'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export class HoprToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: HoprTokenInterface

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<[string]>

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>

    'MINTER_ROLE()'(overrides?: CallOverrides): Promise<[string]>

    accountSnapshots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }>

    'accountSnapshots(address,uint256)'(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }>

    allowance(holder: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'allowance(address,address)'(holder: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    authorizeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'authorizeOperator(address)'(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    balanceOf(tokenHolder: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOf(address)'(tokenHolder: string, overrides?: CallOverrides): Promise<[BigNumber]>

    balanceOfAt(_owner: string, _blockNumber: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOfAt(address,uint128)'(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'burn(uint256,bytes)'(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    'decimals()'(overrides?: CallOverrides): Promise<[number]>

    defaultOperators(overrides?: CallOverrides): Promise<[string[]]>

    'defaultOperators()'(overrides?: CallOverrides): Promise<[string[]]>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>

    'getRoleAdmin(bytes32)'(role: BytesLike, overrides?: CallOverrides): Promise<[string]>

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    'getRoleMember(bytes32,uint256)'(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    'getRoleMemberCount(bytes32)'(role: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    granularity(overrides?: CallOverrides): Promise<[BigNumber]>

    'granularity()'(overrides?: CallOverrides): Promise<[BigNumber]>

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>

    'hasRole(bytes32,address)'(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>

    isOperatorFor(operator: string, tokenHolder: string, overrides?: CallOverrides): Promise<[boolean]>

    'isOperatorFor(address,address)'(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    mint(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'mint(address,uint256,bytes,bytes)'(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    'name()'(overrides?: CallOverrides): Promise<[string]>

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'operatorBurn(address,uint256,bytes,bytes)'(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'operatorSend(address,address,uint256,bytes,bytes)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    revokeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'revokeOperator(address)'(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'send(address,uint256,bytes)'(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    'symbol()'(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>

    totalSupplyAt(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupplyAt(uint128)'(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    totalSupplySnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }>

    'totalSupplySnapshots(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<string>

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>

  'MINTER_ROLE()'(overrides?: CallOverrides): Promise<string>

  accountSnapshots(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }>

  'accountSnapshots(address,uint256)'(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }>

  allowance(holder: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

  'allowance(address,address)'(holder: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  authorizeOperator(
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'authorizeOperator(address)'(
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  balanceOf(tokenHolder: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(tokenHolder: string, overrides?: CallOverrides): Promise<BigNumber>

  balanceOfAt(_owner: string, _blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOfAt(address,uint128)'(
    _owner: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  burn(
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'burn(uint256,bytes)'(
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  'decimals()'(overrides?: CallOverrides): Promise<number>

  defaultOperators(overrides?: CallOverrides): Promise<string[]>

  'defaultOperators()'(overrides?: CallOverrides): Promise<string[]>

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

  'getRoleAdmin(bytes32)'(role: BytesLike, overrides?: CallOverrides): Promise<string>

  getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>

  'getRoleMember(bytes32,uint256)'(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>

  getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  'getRoleMemberCount(bytes32)'(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'grantRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  granularity(overrides?: CallOverrides): Promise<BigNumber>

  'granularity()'(overrides?: CallOverrides): Promise<BigNumber>

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>

  'hasRole(bytes32,address)'(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>

  isOperatorFor(operator: string, tokenHolder: string, overrides?: CallOverrides): Promise<boolean>

  'isOperatorFor(address,address)'(operator: string, tokenHolder: string, overrides?: CallOverrides): Promise<boolean>

  mint(
    account: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'mint(address,uint256,bytes,bytes)'(
    account: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  operatorBurn(
    account: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'operatorBurn(address,uint256,bytes,bytes)'(
    account: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  operatorSend(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'operatorSend(address,address,uint256,bytes,bytes)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'renounceRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  revokeOperator(
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'revokeOperator(address)'(
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'revokeRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  send(
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'send(address,uint256,bytes)'(
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  totalSupplyAt(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'totalSupplyAt(uint128)'(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  totalSupplySnapshots(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }>

  'totalSupplySnapshots(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferFrom(
    holder: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    holder: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<string>

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>

    'MINTER_ROLE()'(overrides?: CallOverrides): Promise<string>

    accountSnapshots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }>

    'accountSnapshots(address,uint256)'(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }>

    allowance(holder: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

    'allowance(address,address)'(holder: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(spender: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'approve(address,uint256)'(spender: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    authorizeOperator(operator: string, overrides?: CallOverrides): Promise<void>

    'authorizeOperator(address)'(operator: string, overrides?: CallOverrides): Promise<void>

    balanceOf(tokenHolder: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(tokenHolder: string, overrides?: CallOverrides): Promise<BigNumber>

    balanceOfAt(_owner: string, _blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOfAt(address,uint128)'(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(amount: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<void>

    'burn(uint256,bytes)'(amount: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<void>

    decimals(overrides?: CallOverrides): Promise<number>

    'decimals()'(overrides?: CallOverrides): Promise<number>

    defaultOperators(overrides?: CallOverrides): Promise<string[]>

    'defaultOperators()'(overrides?: CallOverrides): Promise<string[]>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

    'getRoleAdmin(bytes32)'(role: BytesLike, overrides?: CallOverrides): Promise<string>

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>

    'getRoleMember(bytes32,uint256)'(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'getRoleMemberCount(bytes32)'(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    'grantRole(bytes32,address)'(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    granularity(overrides?: CallOverrides): Promise<BigNumber>

    'granularity()'(overrides?: CallOverrides): Promise<BigNumber>

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>

    'hasRole(bytes32,address)'(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>

    isOperatorFor(operator: string, tokenHolder: string, overrides?: CallOverrides): Promise<boolean>

    'isOperatorFor(address,address)'(operator: string, tokenHolder: string, overrides?: CallOverrides): Promise<boolean>

    mint(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'mint(address,uint256,bytes,bytes)'(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'operatorBurn(address,uint256,bytes,bytes)'(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'operatorSend(address,address,uint256,bytes,bytes)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    'renounceRole(bytes32,address)'(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    revokeOperator(operator: string, overrides?: CallOverrides): Promise<void>

    'revokeOperator(address)'(operator: string, overrides?: CallOverrides): Promise<void>

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    'revokeRole(bytes32,address)'(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    send(recipient: string, amount: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<void>

    'send(address,uint256,bytes)'(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupplyAt(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'totalSupplyAt(uint128)'(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    totalSupplySnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }>

    'totalSupplySnapshots(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }>

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'transfer(address,uint256)'(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    transferFrom(holder: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>
  }

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>

    AuthorizedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): TypedEventFilter<[string, string], { operator: string; tokenHolder: string }>

    Burned(
      operator: string | null,
      from: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string],
      {
        operator: string
        from: string
        amount: BigNumber
        data: string
        operatorData: string
      }
    >

    Minted(
      operator: string | null,
      to: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string],
      {
        operator: string
        to: string
        amount: BigNumber
        data: string
        operatorData: string
      }
    >

    RevokedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): TypedEventFilter<[string, string], { operator: string; tokenHolder: string }>

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<[string, string, string], { role: string; account: string; sender: string }>

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<[string, string, string], { role: string; account: string; sender: string }>

    Sent(
      operator: string | null,
      from: string | null,
      to: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string],
      {
        operator: string
        from: string
        to: string
        amount: BigNumber
        data: string
        operatorData: string
      }
    >

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>
  }

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<BigNumber>

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    'MINTER_ROLE()'(overrides?: CallOverrides): Promise<BigNumber>

    accountSnapshots(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'accountSnapshots(address,uint256)'(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    allowance(holder: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

    'allowance(address,address)'(holder: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    authorizeOperator(operator: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    'authorizeOperator(address)'(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    balanceOf(tokenHolder: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(tokenHolder: string, overrides?: CallOverrides): Promise<BigNumber>

    balanceOfAt(_owner: string, _blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOfAt(address,uint128)'(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'burn(uint256,bytes)'(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    defaultOperators(overrides?: CallOverrides): Promise<BigNumber>

    'defaultOperators()'(overrides?: CallOverrides): Promise<BigNumber>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'getRoleAdmin(bytes32)'(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getRoleMember(bytes32,uint256)'(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'getRoleMemberCount(bytes32)'(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    granularity(overrides?: CallOverrides): Promise<BigNumber>

    'granularity()'(overrides?: CallOverrides): Promise<BigNumber>

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>

    'hasRole(bytes32,address)'(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>

    isOperatorFor(operator: string, tokenHolder: string, overrides?: CallOverrides): Promise<BigNumber>

    'isOperatorFor(address,address)'(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    mint(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'mint(address,uint256,bytes,bytes)'(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'operatorBurn(address,uint256,bytes,bytes)'(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'operatorSend(address,address,uint256,bytes,bytes)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    revokeOperator(operator: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    'revokeOperator(address)'(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'send(address,uint256,bytes)'(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupplyAt(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'totalSupplyAt(uint128)'(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    totalSupplySnapshots(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'totalSupplySnapshots(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'MINTER_ROLE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    accountSnapshots(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'accountSnapshots(address,uint256)'(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    allowance(holder: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'allowance(address,address)'(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    authorizeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'authorizeOperator(address)'(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    balanceOf(tokenHolder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'balanceOf(address)'(tokenHolder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOfAt(_owner: string, _blockNumber: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'balanceOfAt(address,uint128)'(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'burn(uint256,bytes)'(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    defaultOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'defaultOperators()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getRoleAdmin(bytes32)'(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getRoleMember(bytes32,uint256)'(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getRoleMemberCount(bytes32)'(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    granularity(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'granularity()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isOperatorFor(operator: string, tokenHolder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isOperatorFor(address,address)'(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    mint(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'mint(address,uint256,bytes,bytes)'(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'operatorBurn(address,uint256,bytes,bytes)'(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'operatorSend(address,address,uint256,bytes,bytes)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    revokeOperator(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'revokeOperator(address)'(
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'send(address,uint256,bytes)'(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupplyAt(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupplyAt(uint128)'(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupplySnapshots(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupplySnapshots(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
