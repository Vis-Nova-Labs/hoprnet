/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface HoprForwarderInterface extends ethers.utils.Interface {
  functions: {
    'ERC1820_REGISTRY()': FunctionFragment
    'HOPR_TOKEN()': FunctionFragment
    'MULTISIG()': FunctionFragment
    'TOKENS_RECIPIENT_INTERFACE_HASH()': FunctionFragment
    'recoverTokens(address)': FunctionFragment
    'tokensReceived(address,address,address,uint256,bytes,bytes)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'ERC1820_REGISTRY', values?: undefined): string
  encodeFunctionData(functionFragment: 'HOPR_TOKEN', values?: undefined): string
  encodeFunctionData(functionFragment: 'MULTISIG', values?: undefined): string
  encodeFunctionData(functionFragment: 'TOKENS_RECIPIENT_INTERFACE_HASH', values?: undefined): string
  encodeFunctionData(functionFragment: 'recoverTokens', values: [string]): string
  encodeFunctionData(
    functionFragment: 'tokensReceived',
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string

  decodeFunctionResult(functionFragment: 'ERC1820_REGISTRY', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'HOPR_TOKEN', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MULTISIG', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'TOKENS_RECIPIENT_INTERFACE_HASH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'recoverTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokensReceived', data: BytesLike): Result

  events: {}
}

export class HoprForwarder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: HoprForwarderInterface

  functions: {
    ERC1820_REGISTRY(overrides?: CallOverrides): Promise<[string]>

    HOPR_TOKEN(overrides?: CallOverrides): Promise<[string]>

    MULTISIG(overrides?: CallOverrides): Promise<[string]>

    TOKENS_RECIPIENT_INTERFACE_HASH(overrides?: CallOverrides): Promise<[string]>

    recoverTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  ERC1820_REGISTRY(overrides?: CallOverrides): Promise<string>

  HOPR_TOKEN(overrides?: CallOverrides): Promise<string>

  MULTISIG(overrides?: CallOverrides): Promise<string>

  TOKENS_RECIPIENT_INTERFACE_HASH(overrides?: CallOverrides): Promise<string>

  recoverTokens(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  tokensReceived(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    ERC1820_REGISTRY(overrides?: CallOverrides): Promise<string>

    HOPR_TOKEN(overrides?: CallOverrides): Promise<string>

    MULTISIG(overrides?: CallOverrides): Promise<string>

    TOKENS_RECIPIENT_INTERFACE_HASH(overrides?: CallOverrides): Promise<string>

    recoverTokens(token: string, overrides?: CallOverrides): Promise<void>

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    ERC1820_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>

    HOPR_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

    MULTISIG(overrides?: CallOverrides): Promise<BigNumber>

    TOKENS_RECIPIENT_INTERFACE_HASH(overrides?: CallOverrides): Promise<BigNumber>

    recoverTokens(token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    ERC1820_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>

    HOPR_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MULTISIG(overrides?: CallOverrides): Promise<PopulatedTransaction>

    TOKENS_RECIPIENT_INTERFACE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    recoverTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
